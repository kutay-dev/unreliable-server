generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  GOD
}

enum ChatType {
  PUBLIC
  PRIVATE
}

enum AIMessageRole {
  USER
  ASSISTANT
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique @map("username") @db.VarChar(20)
  password  String   @map("password") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  role      Role     @default(USER) @map("role")

  messages  Message[]
  members   ChatMember[]
  AIMessage AIMessage[]

  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Chat {
  id       String   @id @default(uuid()) @db.Uuid
  name     String   @unique @map("name") @db.VarChar(50)
  password String?  @map("password") @db.VarChar(255)
  type     ChatType @default(PRIVATE) @map("type")

  messages Message[]
  members  ChatMember[]

  @@map("chats")
}

model ChatMember {
  id       String   @id @default(uuid()) @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  chatId   String   @map("chat_id") @db.Uuid
  joinedAt DateTime @default(now()) @map("joined_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@index([chatId])
  @@map("chat_members")
}

model Message {
  id        String    @id @default(ulid())
  authorId  String    @map("author_id") @db.Uuid
  chatId    String    @map("chat_id") @db.Uuid
  text      String?   @map("text") @db.Text
  imageUrl  String?   @map("image_url")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId, id])
  @@index([authorId])
  @@index([text(ops: raw("gin_trgm_ops"))], type: Gin, map: "idx_messages_content_trgm")
  @@map("messages")
}

model AIMessage {
  id        String        @id @default(ulid())
  userId    String        @map("user_id") @db.Uuid
  content   String        @map("content") @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  role      AIMessageRole

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ai_messages")
}
