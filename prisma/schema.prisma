generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  GOD
}

enum ChatType {
  PUBLIC
  PRIVATE
}

enum AIMessageRole {
  USER
  ASSISTANT
}

model User {
  id        String       @id @default(uuid()) @db.Uuid
  username  String       @unique
  password  String
  role      Role         @default(USER)
  messages  Message[]
  members   ChatMember[]
  createdAt DateTime     @default(now())
  AIMessage AIMessage[]

  @@map("users")
}

model Chat {
  id       String       @id @default(uuid()) @db.Uuid
  name     String       @unique
  type     ChatType     @default(PRIVATE)
  password String?
  messages Message[]
  members  ChatMember[]

  @@map("chats")
}

model ChatMember {
  id       String   @id @default(uuid()) @db.Uuid
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.Uuid
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String   @db.Uuid
  joinedAt DateTime @default(now())

  @@unique([userId, chatId])
  @@map("chat_members")
}

model Message {
  id        String    @id @default(ulid())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.Uuid
  chat      Chat      @relation(fields: [chatId], references: [id])
  chatId    String    @db.Uuid
  text      String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([text(ops: raw("gin_trgm_ops"))], type: Gin, map: "idx_messages_content_trgm")
  @@map("messages")
}

model AIMessage {
  id        String        @id @default(ulid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.Uuid
  role      AIMessageRole
  content   String
  createdAt DateTime      @default(now())

  @@map("ai_messages")
}
